{"version":3,"sources":["Basics.js","DateRange.js","Experience.js","Education.js","App.js","serviceWorker.js","index.js"],"names":["getNetworkIconClasses","network","toLowerCase","Basics","label","location","city","countryCode","region","name","profiles","website","profileLinks","map","url","className","href","key","rel","target","DateRange","startDate","endDate","startYear","parseInt","endYear","colorClass","Experience","jobs","work","company","position","summary","highlights","pictures","sanitizedCompanyName","replace","companyPictures","picturePath","index","alt","src","process","highlight","Education","degrees","education","institution","area","studyType","gpa","degreePictures","App","resume","basics","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7770fbe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction getNetworkIconClasses(network) {\r\n    switch (network.toLowerCase()) {\r\n        case \"github\":\r\n            return \"fab fa-github-square\";\r\n        case \"linkedin\":\r\n            return \"fab fa-linkedin\";\r\n        default:\r\n            return \"far fa-comment-alt\";\r\n    }\r\n}\r\n\r\nexport function Basics({\r\n    label,\r\n    location: { city, countryCode, region },\r\n    name,\r\n    profiles,\r\n    website\r\n}) {\r\n    const profileLinks = profiles.map(({ network, url }) => {\r\n        return (\r\n            <a\r\n                className=\"icon is-medium\"\r\n                href={url}\r\n                key={`${network}-profile`}\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n            >\r\n                <i className={`${getNetworkIconClasses(network)} fa-lg`} />\r\n            </a>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className=\"hero is-fullheight\">\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"is-size-1 title\">{name}</h1>\r\n                    <h2 className=\"is-marginless-bottom is-size-4 subtitle\">\r\n                        {label}\r\n                    </h2>\r\n                    <div>{`${city}, ${region}, ${countryCode}`}</div>\r\n                    <a href={website}>{website}</a>\r\n                    <div>{profileLinks}</div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nBasics.propTypes = {\r\n    label: PropTypes.string,\r\n    location: PropTypes.shape({\r\n        city: PropTypes.string,\r\n        countryCode: PropTypes.string,\r\n        region: PropTypes.string\r\n    }),\r\n    name: PropTypes.string,\r\n    profiles: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            network: PropTypes.string,\r\n            username: PropTypes.string,\r\n            url: PropTypes.string\r\n        })\r\n    ),\r\n    website: PropTypes.string\r\n};\r\n\r\nexport default Basics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport function DateRange({ startDate, endDate }) {\r\n    const startYear = parseInt(startDate);\r\n    const endYear = parseInt(endDate) || \"\";\r\n    const colorClass = endYear ? \"has-text-grey-light\" : \"has-text-primary\";\r\n\r\n    return (\r\n        <div\r\n            className={`is-daterange has-text-weight-bold is-size-5 ${colorClass}`}\r\n        >\r\n            {`${startYear} - ${endYear}`}\r\n        </div>\r\n    );\r\n}\r\nDateRange.propTypes = {\r\n    startDate: PropTypes.string,\r\n    endDate: PropTypes.string\r\n};\r\n\r\nexport default DateRange;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport DateRange from \"./DateRange\";\r\n\r\nexport function Experience({ work }) {\r\n    const jobs = work.map(\r\n        ({\r\n            company,\r\n            position,\r\n            website,\r\n            startDate,\r\n            endDate,\r\n            summary,\r\n            highlights,\r\n            pictures\r\n        }) => {\r\n            const sanitizedCompanyName = company.replace(/ *\\([^)]*\\) */g, \"\");\r\n            const companyPictures = pictures.map((picturePath, index) => {\r\n                return (\r\n                    <p className=\"image is-128x128\" key={picturePath}>\r\n                        <img\r\n                            alt={`${sanitizedCompanyName} logo ${index}`}\r\n                            src={`${process.env.PUBLIC_URL}/${picturePath}`}\r\n                        />\r\n                    </p>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <article className=\"media\" key={`${company}-job`}>\r\n                    <figure className=\"has-text-centered media-left\">\r\n                        <DateRange endDate={endDate} startDate={startDate} />\r\n                        {companyPictures}\r\n                    </figure>\r\n                    <div className=\"media-content\">\r\n                        <h1 className=\"title is-size-4\">\r\n                            <a\r\n                                href={website}\r\n                                rel=\"noopener noreferrer\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                {sanitizedCompanyName}\r\n                            </a>\r\n                        </h1>\r\n                        <h2 className=\"subtitle\">{position}</h2>\r\n                        <p>{summary}</p>\r\n                        <div className=\"content\">\r\n                            <ul>\r\n                                {highlights.map((highlight, index) => {\r\n                                    return (\r\n                                        <li\r\n                                            key={`${sanitizedCompanyName}-highlight-${index}`}\r\n                                        >\r\n                                            {highlight}\r\n                                        </li>\r\n                                    );\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"container\">\r\n                <h1 className=\"title\">Experience</h1>\r\n                {jobs}\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nExperience.propTypes = {\r\n    work: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            company: PropTypes.string,\r\n            position: PropTypes.string,\r\n            website: PropTypes.string,\r\n            startDate: PropTypes.string,\r\n            endDate: PropTypes.string,\r\n            summary: PropTypes.string,\r\n            highlights: PropTypes.arrayOf(PropTypes.string),\r\n            pictures: PropTypes.arrayOf(PropTypes.string)\r\n        })\r\n    )\r\n};\r\n\r\nexport default Experience;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport DateRange from \"./DateRange\";\r\n\r\nexport function Education({ education }) {\r\n    const degrees = education.map(\r\n        ({\r\n            institution,\r\n            area,\r\n            studyType,\r\n            startDate,\r\n            endDate,\r\n            gpa,\r\n            pictures\r\n        }) => {\r\n            const degreePictures = pictures.map((picturePath, index) => {\r\n                return (\r\n                    <p\r\n                        className=\"image is-96x96 is-inline-flex\"\r\n                        key={picturePath}\r\n                    >\r\n                        <img\r\n                            alt={`${institution} logo ${index}`}\r\n                            src={`${process.env.PUBLIC_URL}/${picturePath}`}\r\n                        />\r\n                    </p>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <article\r\n                    className=\"media\"\r\n                    key={`${institution}-${area}-degree`}\r\n                >\r\n                    <figure className=\"has-text-centered media-left\">\r\n                        <DateRange endDate={endDate} startDate={startDate} />\r\n                        {degreePictures}\r\n                    </figure>\r\n                    <div className=\"media-content\">\r\n                        <h1 className=\"title is-size-4\">{institution}</h1>\r\n                        <h2 className=\"subtitle\">{`${studyType} of ${area}`}</h2>\r\n                        <p>{`GPA: ${gpa}`}</p>\r\n                    </div>\r\n                </article>\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"container\">\r\n                <h1 className=\"title\">Education</h1>\r\n                {degrees}\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nEducation.propTypes = {\r\n    education: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            institution: PropTypes.string,\r\n            area: PropTypes.string,\r\n            studyType: PropTypes.string,\r\n            startDate: PropTypes.string,\r\n            endDate: PropTypes.string,\r\n            gpa: PropTypes.string,\r\n            pictures: PropTypes.arrayOf(PropTypes.string)\r\n        })\r\n    )\r\n};\r\n\r\nexport default Education;\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport resume from \"./resume\";\r\nimport { Basics } from \"./Basics\";\r\nimport { Experience } from \"./Experience\";\r\nimport Education from \"./Education\";\r\n\r\nexport function App() {\r\n    return (\r\n        <Fragment>\r\n            <Basics {...resume.basics} />\r\n            <Experience work={resume.work} />\r\n            <Education education={resume.education} />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/js/all\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./custom.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}